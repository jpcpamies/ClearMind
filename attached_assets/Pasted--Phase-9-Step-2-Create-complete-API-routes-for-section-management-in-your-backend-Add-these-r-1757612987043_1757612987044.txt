// Phase 9 Step 2: Create complete API routes for section management in your backend

// Add these routes to your main server file (likely server.js or index.js)

// GET all sections for a specific group
app.get('/api/groups/:groupId/sections', authenticateToken, async (req, res) => {
  try {
    const { groupId } = req.params;
    const userId = req.user.id;
    
    const sections = await pool.query(
      'SELECT * FROM todo_sections WHERE group_id = $1 AND user_id = $2 ORDER BY "order" ASC',
      [groupId, userId]
    );
    
    res.json(sections.rows);
  } catch (error) {
    console.error('Error fetching sections:', error);
    res.status(500).json({ error: 'Failed to fetch sections' });
  }
});

// POST create new section
app.post('/api/groups/:groupId/sections', authenticateToken, async (req, res) => {
  try {
    const { groupId } = req.params;
    const { name } = req.body;
    const userId = req.user.id;
    
    // Get the next order number
    const maxOrderResult = await pool.query(
      'SELECT COALESCE(MAX("order"), 0) + 1 as next_order FROM todo_sections WHERE group_id = $1 AND user_id = $2',
      [groupId, userId]
    );
    const nextOrder = maxOrderResult.rows[0].next_order;
    
    const newSection = await pool.query(
      'INSERT INTO todo_sections (name, group_id, user_id, "order") VALUES ($1, $2, $3, $4) RETURNING *',
      [name, groupId, userId, nextOrder]
    );
    
    res.status(201).json(newSection.rows[0]);
  } catch (error) {
    console.error('Error creating section:', error);
    res.status(500).json({ error: 'Failed to create section' });
  }
});

// PUT update section name
app.put('/api/sections/:sectionId', authenticateToken, async (req, res) => {
  try {
    const { sectionId } = req.params;
    const { name } = req.body;
    const userId = req.user.id;
    
    const updatedSection = await pool.query(
      'UPDATE todo_sections SET name = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 AND user_id = $3 RETURNING *',
      [name, sectionId, userId]
    );
    
    if (updatedSection.rows.length === 0) {
      return res.status(404).json({ error: 'Section not found' });
    }
    
    res.json(updatedSection.rows[0]);
  } catch (error) {
    console.error('Error updating section:', error);
    res.status(500).json({ error: 'Failed to update section' });
  }
});

// PUT reorder sections
app.put('/api/groups/:groupId/sections/reorder', authenticateToken, async (req, res) => {
  try {
    const { groupId } = req.params;
    const { sectionIds } = req.body; // Array of section IDs in new order
    const userId = req.user.id;
    
    const client = await pool.connect();
    try {
      await client.query('BEGIN');
      
      for (let i = 0; i < sectionIds.length; i++) {
        await client.query(
          'UPDATE todo_sections SET "order" = $1 WHERE id = $2 AND group_id = $3 AND user_id = $4',
          [i + 1, sectionIds[i], groupId, userId]
        );
      }
      
      await client.query('COMMIT');
      res.json({ success: true });
    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Error reordering sections:', error);
    res.status(500).json({ error: 'Failed to reorder sections' });
  }
});

// PUT toggle section collapse state
app.put('/api/sections/:sectionId/toggle-collapse', authenticateToken, async (req, res) => {
  try {
    const { sectionId } = req.params;
    const userId = req.user.id;
    
    const toggledSection = await pool.query(
      'UPDATE todo_sections SET is_collapsed = NOT is_collapsed, updated_at = CURRENT_TIMESTAMP WHERE id = $1 AND user_id = $2 RETURNING *',
      [sectionId, userId]
    );
    
    if (toggledSection.rows.length === 0) {
      return res.status(404).json({ error: 'Section not found' });
    }
    
    res.json(toggledSection.rows[0]);
  } catch (error) {
    console.error('Error toggling section:', error);
    res.status(500).json({ error: 'Failed to toggle section' });
  }
});

// DELETE section
app.delete('/api/sections/:sectionId', authenticateToken, async (req, res) => {
  try {
    const { sectionId } = req.params;
    const userId = req.user.id;
    
    const client = await pool.connect();
    try {
      await client.query('BEGIN');
      
      // Remove section assignment from ideas (set section_id to NULL)
      await client.query(
        'UPDATE ideas SET section_id = NULL WHERE section_id = $1 AND user_id = $2',
        [sectionId, userId]
      );
      
      // Delete the section
      const deletedSection = await client.query(
        'DELETE FROM todo_sections WHERE id = $1 AND user_id = $2 RETURNING *',
        [sectionId, userId]
      );
      
      await client.query('COMMIT');
      
      if (deletedSection.rows.length === 0) {
        return res.status(404).json({ error: 'Section not found' });
      }
      
      res.json({ success: true });
    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Error deleting section:', error);
    res.status(500).json({ error: 'Failed to delete section' });
  }
});

console.log('Section management API routes added successfully');