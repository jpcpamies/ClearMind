The first screen upon access is an infinite canvas. From the left sidebar, users can create a new idea (which is the fundamental unit of the MVP). Clicking the button brings up a modal that allows you to create the idea and associate it with a group. Groups are listed in the same sidebar. Cards are placed on the canvas and take on a color for each idea group. These cards can be freely moved and organized for clarity, both with colors and their placement on the infinite canvas.
In the idea groups menu, each group has a three-dot menu that displays a contextual menu with the option to edit group details and a button that says "update todolist." This creates a to-do list with the same name as the idea group and adds all the ideas, one after another, in list form. This takes us to the next screen, the "Todo list" screen.
The to-do list screen is reached by switching tabs from the central buttons at the top of the canvas. These buttons remain in the same place on both screens. On the to-do list screen, there's a grid with square cards representing the to-do lists. Each has the title of the group they belong to. Clicking on one opens a modal showing the group title (or to-do list title, they are the same) and inside, a list of ideas. Below, there's a field to manually add "new tasks." These are added to the end of the current task list. Additionally, each task here has a contextual menu that allows defining a priority level. There are more functionalities too. Sections can be created from a field that says "Create a new section" with a "+" button. Tasks can be drag-and-dropped within sections, and you can arrange them in any order you want; sections can also be ordered as you wish. And at the bottom of the modal, there's an export button that allows selecting the priority level. This is useful for printing a list with the most important tasks to take an actionable plan with your top priorities, etc.
Now for my doubts. First doubt: In terms of the database, after developing a first version of the MVP, I've had many problems making the mirrored relationship between idea groups and to-do lists work well. The idea was to have separate tables, one for idea groups and a distinct one for to-do lists. Although both had to have the same items, in one these items are ideas, and in the other, they are tasks. This constantly required comparing which part was missing in the mirror to generate it and created more record redundancy. Now I've considered simplifying this and making the 'idea' the core unit, and then its container would be called "idea-container," or similar. This same container would then be loaded both in the idea group interface and in the to-do list interface. Sharing database data but rendering in a distinct HTML chassis. With this, I intend to simplify database requests and minimize system complexity to make it super responsive on both sides. Example situation: when an idea belonging to an idea group is created on the canvas screen (in reality, that idea belongs to its 'idea-container' with an ID), it's rendered as a group on the canvas, and each idea is rendered as a card, with all that entails at a UX/UI level. And on the to-do list side, each existing 'idea-container' is printed as a to-do list with the same items inside, which are ideas, but in this case, they have an HTML "chassis" that makes them look like tasks. And this leads us to the next point.
In the database, the "idea" table (remember that depending on the interface, they are printed as ideas or tasks, but they are taken from the same table). To have all the necessary elements so that they can be assigned a priority level, that several "ideas" can belong to a "section within a to-do list," and for all the details I mentioned earlier, I propose a single "ideas" table with all available fields. On the canvas side, certain fields will be filled in, such as title, description, group name (the "idea-container"), and on the to-do list side, other fields will be defined, such as: priority level, etc. All fields have a programmed default value to have a default state.
My doubt is. I have two types of user journeys in mind. 1) Starting from the canvas screen and beginning to add ideas that belong to an idea group, and eventually, the user clicks the button to create a to-do list with that selection. Or, the to-do list is dynamically created in real-time as associations are created in the database between "ideas" and their "idea group" (which in the database is the "idea-container"). So that when the user goes to the to-do list screen, they find it configured according to how many groups with their ideas the user has manually set up on the canvas screen. Or case 2) The user starts from the to-do list view and clicks the "create new todolist" button. This creates a new "idea-container" type, which opens an empty modal to start populating with "tasks" in this case, but which are actually "ideas" at the database level. With the peculiarity that on this side of the interface, the HTML "chassis" of the tasks shows and allows manipulating fields like priority level, and allows making associations with sections (provided they have been previously created, edited, or reordered in the modal).
