Implement complete email/password authentication system for Clear Mind v2.0 with floating user profile:

REQUIRED DEPENDENCIES:
Add to package.json: bcryptjs, jsonwebtoken, validator, express-rate-limit

BACKEND AUTHENTICATION (Express.js):

Create /server/middleware/auth.js:
- Authentication middleware that verifies JWT tokens from Authorization header
- Extract user from database and attach to req.user
- Return 401 for missing/invalid tokens

Create /server/routes/auth.js with endpoints:
- POST /api/auth/register (email, password, username, displayName)
- POST /api/auth/login (email, password) 
- POST /api/auth/logout
- GET /api/auth/me (protected route)

Security implementation:
- Hash passwords with bcrypt salt rounds 12
- Generate JWT tokens with 7-day expiration using JWT_SECRET
- Email validation using validator library
- Rate limiting: max 5 login attempts per 15 minutes per IP
- Password requirements: minimum 8 characters, 1 uppercase, 1 lowercase, 1 number

UPDATE users table schema:
- Keep existing structure but ensure email is unique and not null
- Add password_hash VARCHAR(255) NOT NULL
- Add email_verified BOOLEAN DEFAULT false
- Remove any replit-specific fields

FRONTEND AUTHENTICATION (React + TypeScript):

Create authentication components in /src/components/auth/:
- LoginForm.tsx with email and password inputs
- RegisterForm.tsx with email, password, confirm password, username, displayName
- AuthLayout.tsx that switches between login/register forms
- ProtectedRoute.tsx component for route protection

FLOATING USER PROFILE COMPONENT:
Create /src/components/ui/FloatingUserProfile.tsx:
- Position: fixed, top-4, right-4 (top-right corner)
- Circular avatar with user initials or profile picture
- Username display on hover
- Dropdown menu on click with options:
  - "Profile Settings"
  - "Switch Theme" 
  - "Logout"
- Z-index: 1000 to float above all content
- Responsive: hide username on mobile, show only avatar
- Styling similar to the Replit interface: clean, modern, subtle shadow
- Include online status indicator (green dot)

User Profile Dropdown Menu:
- Dark overlay background when open
- Smooth slide-down animation
- User info section: avatar, name, email
- Menu items with hover effects
- Click outside to close
- Proper keyboard navigation (ESC to close)

Create /src/hooks/useAuth.ts custom hook:
- Manage authentication state (user, token, loading, error)
- Functions: login, register, logout, checkAuth
- Store JWT token in localStorage
- Automatically check authentication on app load
- Handle token expiration and refresh

Form validation requirements:
- Real-time email format validation
- Password strength indicator with visual feedback
- Confirm password matching validation
- Username availability (basic client-side length check)
- Display validation errors below each field
- Disable submit button until form is valid

Create authentication pages in /src/pages/:
- LoginPage.tsx 
- RegisterPage.tsx
- DashboardPage.tsx (protected route with FloatingUserProfile component)

ROUTING SETUP:
Configure React Router with these routes:
- / (redirect to /login if not authenticated, /dashboard if authenticated)
- /login (login form)
- /register (registration form)
- /dashboard (protected route with floating user profile visible)

LAYOUT INTEGRATION:
- FloatingUserProfile should appear on all protected pages
- Position it consistently in top-right corner
- Ensure it doesn't interfere with page content
- Make it sticky during page scroll
- Add subtle entrance animation when user logs in

ERROR HANDLING:
Handle these scenarios gracefully:
- Invalid login credentials
- Email already exists during registration
- Weak password validation
- Network connectivity issues
- JWT token expiration
- Rate limiting exceeded

TYPESCRIPT INTERFACES:
Define types in /src/types/auth.ts:
- User interface (id, email, username, displayName, emailVerified, createdAt, updatedAt)
- AuthState interface (user, token, loading, error)
- LoginRequest, RegisterRequest, AuthResponse types

ENVIRONMENT VARIABLES:
Add to .env:
- JWT_SECRET (generate secure random string)
- JWT_EXPIRES_IN=7d

The FloatingUserProfile component should look professional and match the aesthetic shown in your reference image - clean, minimal, with a circular avatar and smooth interactions.